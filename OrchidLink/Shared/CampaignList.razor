@using OrchidLink.Data
@using OrchidLink.Models

@inject IJSRuntime js

<aside>
    <div class="card-section">
        <div class="grid-x">
            <h3 class="cell auto h5">Campaigns</h3>
            <button class="button small" data-open="createCampaignModal">New</button>
        </div>
        <ul class="card-list">
            @foreach (var campaign in Campaigns)
            {
                <li>
                    <button class="card-list-item @(IsActiveCampaign(campaign) ? "active" : "")" @onclick=@(() => UpdateCurrentCampaignValue(campaign))>Is
                        @campaign.Name
                    </button>
                </li>
            }
        </ul>
    </div>
</aside>

<div class="reveal" id="createCampaignModal" data-reveal>
    <h1>Create Campaign</h1>
    <EditForm Model=@Campaign OnValidSubmit=@ValidFormSubmitted>
        <DataAnnotationsValidator />
        <div>
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value=Campaign.Name />
            <ValidationMessage For=@(() => Campaign.Name) />
        </div>
        <div>
            <input type="submit" class="button" value="Save" />
        </div>
    </EditForm>
</div>

@code {
    Campaign Campaign = new Campaign();

    List<Campaign> Campaigns = new List<Campaign>();

    [Parameter]
    public Campaign? CurrentCampaign { get; set; }

    [Parameter]
    public EventCallback<Campaign> CurrentCampaignChanged { get; set; }

    [Inject]
    private ApplicationDbContext DbContext { get; set; }

    void ValidFormSubmitted(EditContext editContext)
    {
        DbContext.Campaigns.Add(Campaign);
        DbContext.SaveChanges();

        Campaign = new Campaign();

        js.InvokeVoidAsync("callFoundation", "#createCampaignModal", "close");
        FetchCampaigns();
    }

    async Task UpdateCurrentCampaignValue(Campaign currentCampaign)
    {
        CurrentCampaign = currentCampaign;
        await CurrentCampaignChanged.InvokeAsync(CurrentCampaign);
    }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        FetchCampaigns();
    }

    protected void FetchCampaigns()
    {
        Campaigns = DbContext.Campaigns.OrderBy(b => b.CreatedAt).ToList();
    }

    protected Boolean IsActiveCampaign(Campaign campaign)
    {
        if (CurrentCampaign != null) 
        {
            return CurrentCampaign.Id == campaign.Id;
        }

        return false;
    }
}

