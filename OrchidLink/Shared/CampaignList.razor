@using OrchidLink.Data
@using OrchidLink.Models

@inject IJSRuntime js

<aside class="card-section remove-padding-x grid-y h-full">
    <div class="grid-x">
        <h3 class="cell auto h5">Campaigns</h3>
        <button class="button small" data-open="createCampaignModal">New</button>
    </div>
    <ul class="card-list cell auto overflow-y-auto">
        @foreach (var campaign in Campaigns)
        {
            <li>
                <button class="card-list-item @(IsActiveCampaign(campaign) ? "active" : "")" @onclick=@(() => UpdateCurrentCampaignValue(campaign))>
                    <p class="title">@campaign.Name</p>
                    <div class="grid-x align-justify">
                        <p class="cell auto grid-x align-middle sub-title items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="icon">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5" />
                            </svg>
                            <span>@campaign.CreatedAt.ToString("dd MMMM")</span>
                        </p>
                        <p class="grid-x align-right align-middle sub-title text-right">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="icon">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244" />
                            </svg>
                            <span>@DbContext.Links.Where(d => d.Campaign.Id == campaign.Id).Count() links</span>
                        </p>
                    </div>
                </button>
            </li>
        }
    </ul>
</aside>

<div class="reveal" id="createCampaignModal" data-reveal>
    <h1>Create Campaign</h1>
    <EditForm Model=@Campaign OnValidSubmit=@ValidFormSubmitted>
        <DataAnnotationsValidator />
        <div>
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value=Campaign.Name />
            <ValidationMessage For=@(() => Campaign.Name) />
        </div>
        <div>
            <input type="submit" class="button" value="Save" />
        </div>
    </EditForm>
</div>

@code {
    Campaign Campaign = new Campaign();

    List<Campaign> Campaigns = new List<Campaign>();

    [Parameter]
    public Campaign? CurrentCampaign { get; set; }

    [Parameter]
    public EventCallback<Campaign> CurrentCampaignChanged { get; set; }

    [Inject]
    private ApplicationDbContext DbContext { get; set; }

    void ValidFormSubmitted(EditContext editContext)
    {
        DbContext.Campaigns.Add(Campaign);
        DbContext.SaveChanges();

        Campaign = new Campaign();

        js.InvokeVoidAsync("callFoundation", "#createCampaignModal", "close");
        FetchCampaigns();
    }

    async Task UpdateCurrentCampaignValue(Campaign currentCampaign)
    {
        CurrentCampaign = CurrentCampaign != null && currentCampaign.Id == CurrentCampaign.Id ? null : currentCampaign;
        await CurrentCampaignChanged.InvokeAsync(CurrentCampaign);
    }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        FetchCampaigns();
    }

    protected void FetchCampaigns()
    {
        Campaigns = DbContext.Campaigns.OrderBy(b => b.CreatedAt).ToList();
    }

    protected Boolean IsActiveCampaign(Campaign campaign)
    {
        if (CurrentCampaign != null) 
        {
            return CurrentCampaign.Id == campaign.Id;
        }

        return false;
    }
}

