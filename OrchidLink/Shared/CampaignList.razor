@using OrchidLink.Data
@using OrchidLink.Models

@inject IJSRuntime js

<aside>
    <div class="grid-x">
        <h3>Campaigns</h3>
        <button class="button" data-open="createCampaignModal">New</button>
    </div>
    <ul>
        @foreach (var campaign in Campaigns)
        {
            <li @onclick=@(() => UpdateCurrentCampaignValue(campaign.Id))>@campaign.Name</li>
        }
    </ul>
</aside>


<div class="reveal" id="createCampaignModal" data-reveal>
    <h1>Create Campaign</h1>
    <EditForm Model=@Campaign OnValidSubmit=@ValidFormSubmitted>
        <DataAnnotationsValidator />
        <div>
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value=Campaign.Name />
            <ValidationMessage For=@(() => Campaign.Name) />
        </div>
        <div>
            <input type="submit" class="button" value="Save" />
        </div>
    </EditForm>
</div>

@code {
    Campaign Campaign = new Campaign();

    List<Campaign> Campaigns = new List<Campaign>();

    [Parameter]
    public string? CurrentCampaign { get; set; }

    [Parameter]
    public EventCallback<string> CurrentCampaignChanged { get; set; }

    [Inject]
    private ApplicationDbContext DbContext { get; set; }

    void ValidFormSubmitted(EditContext editContext)
    {
        DbContext.Campaigns.Add(Campaign);
        DbContext.SaveChanges();

        Campaign = new Campaign();

        js.InvokeVoidAsync("callFoundation", "#createCampaignModal", "close");
        FetchCampaigns();
    }

    async Task UpdateCurrentCampaignValue(string currentCampaign)
    {
        CurrentCampaign = currentCampaign;
        await CurrentCampaignChanged.InvokeAsync(CurrentCampaign);
    }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        FetchCampaigns();
    }

    protected void FetchCampaigns()
    {
        Campaigns = DbContext.Campaigns.OrderBy(b => b.CreatedAt).ToList();
    }
}

