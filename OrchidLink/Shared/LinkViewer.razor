@using OrchidLink.Data
@using OrchidLink.Models

@inject NavigationManager _navigationManager

<aside class="cell small-3 aside-block">
	<div class="card card-section full">
		<div class="grid-x card-header">
			<div class="cell auto">
				<h3 class="h5 remove-margin-y">Links</h3>
				<span class="sub-title">@(CurrentCampaign != null ? CurrentCampaign.Name : "Showing all links without campaign")</span>
			</div>
			<div>
				<button 
					class="button small" 
					@onclick="@(() => CreatingLink = true)"
				>
					New
				</button>
			</div>
		</div>
		<ul class="card-list">
			@foreach (var link in Links)
			{
				<li>
					<a class="card-list-item @(link.Id == LinkId ? "active" : "")" href="/Links/@link.Id">
						<p class="title">@link.Title</p>
						<div class="grid-x align-justify">
							<p class="cell auto grid-x align-middle sub-title items-center">
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="icon">
									<path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5" />
								</svg>
								<span>@link.CreatedAt.ToString("dd MMMM")</span>
							</p>
						</div>
					</a>
				</li>
			}
		</ul>
	</div>
</aside>
<main class="cell auto aside-block borderless">
	@if (CreatingLink)
	{
		<CreateLink @bind-Showing="CreatingLink" Campaign=@CurrentCampaign LinkCreated=@FetchLinks />
	}
	else if (Link != null)
	{
		<div class="card">
			<div class="card-section">
				<h4>@Link.Title</h4>
				<a href="https://@(GenerateLinkUrl())">
					https://@(GenerateLinkUrl())
				</a>
			</div>
		</div>
	}
	else
	{
		<p>Select an link item or create a new one to show here.</p>
	}
</main>

@code {
	public bool CreatingLink = false;

	Link? Link = null;

	List<Link> Links = new List<Link>();

	[CascadingParameter]
	public string? LinkId { get; set; }

	[Parameter]
	public Campaign? CurrentCampaign { get; set; }

	[Inject]
	private ApplicationDbContext DbContext { get; set; }

	protected async override Task OnInitializedAsync()
	{
		base.OnInitialized();
		FetchLinks();
	}

	protected void FetchLinks()
	{
		if (CurrentCampaign != null) {
			Links = DbContext.Links.Where(d => d.Campaign.Id == CurrentCampaign.Id).ToList();
			return;
		}

		Links = DbContext.Links.Where(d => d.Campaign == null).ToList();
	}

	protected override void OnParametersSet()
	{
		FetchLinks();

		if (LinkId != null)
		{
			Link = DbContext.Links.Where(d => d.Id == LinkId).First();
			return;
		}

		Link = null;
	}

	protected string GenerateLinkUrl()
	{
		var authority = new Uri(_navigationManager.Uri).Authority;
		return $"{authority}/go/{Link.Slug}";
	}
}
